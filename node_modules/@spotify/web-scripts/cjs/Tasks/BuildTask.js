"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const debug_1 = __importDefault(require("debug"));
const cross_spawn_promise_1 = __importDefault(require("cross-spawn-promise"));
const dbg = debug_1.default('web-scripts:build');
function buildTask(task) {
    return __awaiter(this, void 0, void 0, function* () {
        const fns = [];
        if (!task.cjs && !task.esm && !task.types) {
            fns.push(buildTypes, buildCJS, buildESM);
        }
        else {
            if (task.types)
                fns.push(buildTypes);
            if (task.esm)
                fns.push(buildESM);
            if (task.cjs)
                fns.push(buildCJS);
        }
        return Promise.all(fns.map((fn) => __awaiter(this, void 0, void 0, function* () {
            dbg('Beginning %s task', fn.name);
            const result = yield fn(task);
            dbg('Finished %s task', fn.name);
            return result;
        })));
    });
}
exports.buildTask = buildTask;
function buildTypes(task) {
    return __awaiter(this, void 0, void 0, function* () {
        const cmd = 'npx';
        const args = [
            'tsc',
            '--declaration',
            '--isolatedModules',
            'false',
            '--outDir',
            'types',
            '--emitDeclarationOnly',
            '--noEmit',
            'false',
            ...task.restOptions,
        ];
        const stdout = yield cross_spawn_promise_1.default(cmd, args, { stdio: 'inherit' });
        return (stdout || '').toString();
    });
}
function buildCJS(task) {
    return __awaiter(this, void 0, void 0, function* () {
        const cmd = 'npx';
        const args = [
            'tsc',
            '--allowJs',
            '--outDir',
            'cjs',
            '--noEmit',
            'false',
            '--module',
            'CommonJS',
            ...task.restOptions,
        ];
        const stdout = yield cross_spawn_promise_1.default(cmd, args, { stdio: 'inherit' });
        return (stdout || '').toString();
    });
}
function buildESM(task) {
    return __awaiter(this, void 0, void 0, function* () {
        const cmd = 'npx';
        const args = [
            'tsc',
            '--allowJs',
            '--outDir',
            'esm',
            '--noEmit',
            'false',
            '--module',
            'ES2015',
            ...task.restOptions,
        ];
        const stdout = yield cross_spawn_promise_1.default(cmd, args, { stdio: 'inherit' });
        return (stdout || '').toString();
    });
}
//# sourceMappingURL=BuildTask.js.map
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const cross_spawn_promise_1 = __importDefault(require("cross-spawn-promise"));
const debug_1 = __importDefault(require("debug"));
const Paths_1 = require("../Paths");
const dbg = debug_1.default('web-scripts:lint');
function lintTask(task) {
    return __awaiter(this, void 0, void 0, function* () {
        const fns = [eslintRun];
        if (task.typecheck)
            fns.push(typeCheck);
        return yield Promise.all(fns.map((fn) => __awaiter(this, void 0, void 0, function* () {
            dbg('Beginning %s task', fn.name);
            const stdout = yield fn(task);
            dbg('Finished %s task', fn.name);
            return stdout;
        })));
    });
}
exports.lintTask = lintTask;
function eslintRun(task) {
    return __awaiter(this, void 0, void 0, function* () {
        const cmd = 'npx';
        const args = [
            '--no-install',
            'eslint',
            '--ext',
            'js,ts,jsx,tsx',
            Paths_1.CONSUMING_ROOT,
            '--config',
            task.config,
            '--ignore-pattern',
            'types/',
            '--ignore-pattern',
            'cjs/',
            '--ignore-pattern',
            'esm/',
            ...task.restOptions,
        ];
        dbg('npx args %o', args);
        const stdout = yield cross_spawn_promise_1.default(cmd, args, { stdio: 'inherit' });
        return (stdout || '').toString();
    });
}
function typeCheck() {
    return __awaiter(this, void 0, void 0, function* () {
        const cmd = 'npx';
        const args = ['tsc', '--noEmit'];
        const stdout = yield cross_spawn_promise_1.default(cmd, args, { stdio: 'inherit' });
        return (stdout || '').toString();
    });
}
//# sourceMappingURL=LintTask.js.map
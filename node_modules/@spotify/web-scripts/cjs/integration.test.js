"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
require("jest");
const child_process_1 = require("child_process");
const path_1 = require("path");
const util_1 = require("util");
const fs_1 = require("fs");
const object_fromentries_1 = __importDefault(require("object.fromentries"));
const tempy = __importStar(require("tempy"));
const debug_1 = __importDefault(require("debug"));
const rimraf_1 = __importDefault(require("rimraf"));
const Paths_1 = require("./Paths");
const dbg = debug_1.default('web-scripts:integration-test');
const root = path_1.join(__dirname, '..');
const CLI = path_1.join(root, 'bin/web-scripts');
const execPromise = util_1.promisify(child_process_1.exec);
const writeFile = util_1.promisify(fs_1.writeFile);
const mkdir = util_1.promisify(fs_1.mkdir);
const copyFile = util_1.promisify(fs_1.copyFile);
const exec = (cmd, options) => __awaiter(this, void 0, void 0, function* () {
    function _log(resp) {
        if (resp.stdout)
            resp.stdout
                .toString()
                .split('\n')
                .forEach(dbg);
        if (resp.stderr)
            resp.stderr
                .toString()
                .split('\n')
                .forEach(dbg);
    }
    try {
        const resp = yield execPromise(cmd, options);
        _log(resp);
        return resp;
    }
    catch (err) {
        _log(err);
        throw err;
    }
});
const SETUP_REPO_TIMEOUT = 30000;
const TEST_SCRIPTS_TIMEOUT = 60000;
describe('integration tests', () => {
    const MONOREPO_ROOT = path_1.join(root, '../..');
    let PKG_ROOT;
    beforeEach(() => {
        PKG_ROOT = tempy.directory();
    });
    describe('help', () => {
        test('The CLI offers help when invoked with no arguments', () => __awaiter(this, void 0, void 0, function* () {
            const result = yield exec(`${CLI}`);
            expect(result.stdout).toMatch('Usage: web-scripts [options] [command]');
        }));
        test('The CLI offers help when invoked with --help flag', () => __awaiter(this, void 0, void 0, function* () {
            const result = yield exec(`${CLI} --help`);
            expect(result.stdout).toMatch('Usage: web-scripts [options] [command]');
        }));
    });
    describe('TypeScript', () => {
        beforeEach(() => __awaiter(this, void 0, void 0, function* () {
            yield setupRepo('index.ts', 'index.test.ts', 'Component.tsx');
        }), SETUP_REPO_TIMEOUT);
        test('Full integration test', () => __awaiter(this, void 0, void 0, function* () { return yield testScripts([], ['--typecheck']); }), TEST_SCRIPTS_TIMEOUT);
    });
    describe('JavaScript', () => {
        beforeEach(() => __awaiter(this, void 0, void 0, function* () {
            yield setupRepo('index.js', 'index.test.js', 'Component.jsx');
        }), SETUP_REPO_TIMEOUT);
        test('Full integration test', () => __awaiter(this, void 0, void 0, function* () { return yield testScripts(['--no-types']); }), TEST_SCRIPTS_TIMEOUT);
    });
    function setupRepo(...fileNames) {
        return __awaiter(this, void 0, void 0, function* () {
            const localDependencies = [
                'react',
                'ts-jest',
                'typescript',
                '@types/jest',
                '@types/react',
                '@types/react-dom',
            ];
            const pkg = {
                name: 'test-pkg',
                scripts: {
                    test: `${CLI} test`,
                    build: `${CLI} build`,
                    lint: `${CLI} lint`,
                    commit: `${CLI} commit`,
                    release: `${CLI} release`,
                },
                dependencies: object_fromentries_1.default(Object.entries(require(`${Paths_1.THIS_ROOT}/package.json`).dependencies).filter(([k]) => localDependencies.includes(k))),
            };
            const tsConfig = {
                extends: Paths_1.TSCONFIG,
                include: ['src'],
            };
            yield writeFile(path_1.join(PKG_ROOT, 'package.json'), JSON.stringify(pkg, null, '  '));
            yield writeFile(path_1.join(PKG_ROOT, 'tsconfig.json'), JSON.stringify(tsConfig, null, 2));
            yield mkdir(path_1.join(PKG_ROOT, 'src'));
            yield fileNames.map(fileName => copyFile(path_1.join(Paths_1.THIS_ROOT, '__fixtures__', fileName), path_1.join(PKG_ROOT, 'src', fileName)));
            yield copyFile(path_1.join(MONOREPO_ROOT, '.gitignore'), path_1.join(PKG_ROOT, '.gitignore'));
            yield exec('yarn', { cwd: PKG_ROOT });
            yield exec('git init', { cwd: PKG_ROOT });
        });
    }
    function testScripts(buildArgs = [], lintArgs = []) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                rimraf_1.default.sync(path_1.join(PKG_ROOT, 'cjs'));
                expect(fs_1.existsSync(path_1.join(PKG_ROOT, 'cjs/index.js'))).toBe(false);
                yield exec(['yarn build', ...buildArgs].join(' '), { cwd: PKG_ROOT });
                expect(fs_1.existsSync(path_1.join(PKG_ROOT, 'cjs/index.js'))).toBe(true);
                yield exec('yarn test', { cwd: PKG_ROOT });
                yield exec(['yarn lint', ...lintArgs].join(' '), { cwd: PKG_ROOT });
            }
            catch (e) {
                console.log(e.stdout);
                throw e;
            }
        });
    }
});
//# sourceMappingURL=integration.test.js.map
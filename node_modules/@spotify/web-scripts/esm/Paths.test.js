var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { stat as statFS } from 'fs';
import { promisify } from 'util';
const stat = promisify(statFS);
import * as Paths from './Paths';
test('Paths are exported and exist', () => __awaiter(this, void 0, void 0, function* () {
    expect(yield stat(Paths.CONSUMING_ROOT)).toBeTruthy();
    expect(yield stat(Paths.THIS_ROOT)).toBeTruthy();
    expect(yield stat(Paths.ESLINT_CONFIG)).toBeTruthy();
    expect(yield stat(Paths.PRETTIER_CONFIG)).toBeTruthy();
    expect(yield stat(Paths.TSCONFIG)).toBeTruthy();
}));
//# sourceMappingURL=Paths.test.js.map
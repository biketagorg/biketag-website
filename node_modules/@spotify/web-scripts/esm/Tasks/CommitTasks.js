import { default as Debug } from 'debug';
import { default as spawn } from 'cross-spawn';
import { bootstrap as czBootstrap } from 'commitizen/dist/cli/git-cz';
import { LINT_STAGED_CONFIG } from '../Paths';
const dbg = Debug('web-scripts:commit');
export function precommitTask(task) {
    const cmd = 'npx';
    const args = [
        '--no-install',
        'lint-staged',
        '--config',
        LINT_STAGED_CONFIG,
        ...task.restOptions,
    ];
    dbg('npx args %o', args);
    return spawn.sync(cmd, args, {
        env: Object.assign({}, process.env, { WEB_SCRIPTS_SHOULD_FIX: task.fix.toString(), WEB_SCRIPTS_RUN_TESTS: task.tests.toString(), WEB_SCRIPTS_ESLINT_CONFIG: task.eslintConfig, WEB_SCRIPTS_JEST_CONFIG: task.jestConfig, WEB_SCRIPTS_PRETTIER_CONFIG: task.prettierConfig }),
        stdio: 'inherit',
    });
}
export function commitTask(task) {
    dbg('running commitizen commit');
    const cliPath = require
        .resolve('commitizen/package.json')
        .replace('package.json', '');
    return czBootstrap({
        cliPath,
        config: {
            path: task.path,
        },
    }, [null, ...task.restOptions]);
}
export function commitMsgTask(task) {
    const cmd = 'npx';
    const args = [
        '--no-install',
        'commitlint',
        `--config=${task.config}`,
        `--edit=${process.env.HUSKY_GIT_PARAMS}`,
        ...task.restOptions,
    ];
    dbg('npx args %o', args);
    return spawn.sync(cmd, args, { stdio: 'inherit' });
}
export function releaseTask(task) {
    const cmd = 'npx';
    const args = ['--no-install', 'semantic-release', ...task.restOptions];
    dbg('npx args %o', args);
    return spawn.sync(cmd, args, { stdio: 'inherit' });
}
//# sourceMappingURL=CommitTasks.js.map